Project Description: 

Name - ProteinEDU

An interactive protein-folding educational game that teaches the user the basics of primary structure amino acid interactions.

Competitive Analysis:
Inspiration for this project was taken primarily from Foldit, a similarly styled game that involves folding proteins, which actually crowdsources the "work" of determining the structure of real proteins by presenting them to the user in the form of puzzles to solve. The results can then actually be directly used by scientists to determine the correct folding conformation of these proteins, making a real world impact by helping them create models used to develop new medicines to treat disease. Another program called EteRNA, developed right here at Carnegie Mellon, is another "game with a purpose" that enlists the user to help discover the optimal folding of RNA molecules. 

My own game is meant to be purely educational, with the "proteins" being modeled solely at the lowest level of biological complexity, the primary structure (like beads on a string). It uses the same puzzle styled approach as the previous two, but instead of collecting data for the good of science, the idea is to teach anyone (regardless of background biology knowledge) how different amino acids interact with one another, because those basic interactions (hydrogen bonds, disulfide bridge, et. cetera) are what govern the folding of all proteins in every living being on earth. The project is also similar to PyMOL, a software (developed partly in Python) designed to allow users to visualize high-level structures of complicated proteins. However, this software is tailored primarily towards those with a fair deal of experience in biology, as it is difficult to use otherwise. Hence, my game is a combination of both of these types, aiming to teach anyone at all who plays the game the basics of protein folding, all the while never once touching a textbook.

Structural Plan:

The great thing about biology is, just like with programming, the "features that work" are always conserved and reused elsewhere. Every protein in existence is made completely from a combination of twenty amino acids, each of which is identical to each other in every way except for the sidechain attached to it. These sidechains alone are the only difference between the amino acids, and the sequence they are in is responsible for the structure of the protein. 

As such, this paradigm fits neatly into an inheritance hierarchy. A superclass AminoAcid will be subclassed by each of the amino acids (Phenyalanine, Tyrosine, etc). Each amino acid will continue objects representing functional group, including the Alpha Carbon, Amine group, Carboxyl Group, and the unique sidechain, all of which will be subclasses of the FunctionalGroup class, which specifies its charge, interactivity, et.cetera. A fair bit of the details within this hierarchy will be "hardcoded", such as the information about each particular functional group, but this is simply the real information of the biological and chemical world which will never change in the foreseeable future.

The code itself shouldn't need more than one file to operate. This master file will contain the filled inheritence hierarchy, the pygame UI, any applicable physics systems, et. cetera. The data for the game comes in the form of FASTA files (text files with a specific header at the top, just a long string of DNA sequence). The project will contain a folder that contains all the basic presets that I create, and will serve as the location for all user downloaded sequences from PDB (if I end up adding the ability to download sequences from online). 


Algorithmic Plan: 

The trickiest part of my project, without a doubt, will be developing the algorthim to autosolve the folding of the protein. The attributes of the amino acids themselves will be contained within the inheritance hierarchy, and the graphical representations of these objects will be displayed in the interface by pygame, but the actual acting on the objects (while simply in 2D) could be challenging, because the computer has to take into account the interactions between many different objects at the same time. I.e., A will moves towards B because of rule X, but will also move towards C because of rule Y, and additionally will tend away from D because of rule Z. This is easy to check if it the user making a definitive move (A moved next to B, they do not interact so undo the move), but is difficult when it is the computer that must make the necessary steps. So far, although only a small part of my project is written syntactically, most of it has been figured out algorithmically. As for the autosolve feature, I am considering using a backtracking algorithms to make moves to solve the puzzle (using the current location of each object as a initialState), storing the solution in a data structure of "moves", and have the graphical interface interpret these moves in the main loop of pygame to interact with the objects, moving the amino acids one by one into the correct configuration in accordance with the stored moves. There could also be an option where the autosolver does not proceed move by move but rather moves everything at once into the correct spot to save time. Theoretically, the graphical interface could even show some of the steps the algorithm is taking to try and solve the puzzle (of course, not all of them can be displayed because of the sheer volume of permutations possible). Since there are thousands of possible moves if we consider legal moves to be into all possible pixels on the screen, so I will need to determine some way of limiting the legal moves (such that there is no overlaps, the chain does not stretch/break, and more). The solution can be updated upon pressing the autosolve button, so the user can press this button at any point to finish the puzzle.

Timeline Plan:

The first objective to be completed, which has already been accomplished, is to build a program that takes a generic FASTA file (dna sequence) and translates it into a list filled with amino acid names (just strings). This did not take long, just required basic file IO and a dictionary to translate ("Hardcoded" with biological knowledge). The next objective, which are currently underway (likely completed before tp1), is to build the inheritance hierarchy (AminoAcid and FunctionalGroup superclasses) and to populate it with meaningful biological information, including the unique sidechains for each amino acid and its chemical significance, such as charge, polarity, et. cetera which will later be used by the game to determine if a move is favorable or not. Additionally, I am getting started building the interface itself using pygame, creating each of the windows and constructing the game window with the circles representing the amino acids (without any physics or interaction with each other yet). Then, I will use a physics engine (controller) that interprets the data contained in each object (model) to manipulate it accordingly. My goal is to make the movements and user interaction as smooth as possible. Once this is possible, I will work on creating the autosolve feature as mentioned above. All of this will hopefully be complete

Version Control Plan: 

I am currently using GitHub for version control for this project.

Module List:
pygame
multi_key_dict


TP2 UPDATES:
After having created the backbone of the user interface, thankfully I have been able to realize (or am on track to build) most of the features/designs that I had originally planned for the term project. However, for simplicity's sake (and to produce a better product), I have chosen to omit drawing the actual functional groups on the amino acid. I believe that the chemical structure featured on the information tab gives the user enough info about that, and there is no need to complicate the game screen with protruding functional groups. As such, each amino acid will remain purely as a "bead on a string".

TP3 UPDATES: 
Fixed the vast majority of the glitches, including many of the graphics glitches (images flashing and the "no attribute" error), but mostly handled the gameplay glitches. Previously, many of the puzzles were difficult to handle because of amino acids becoming "stuck" at certain locations when the bond lengths were exceeded, and could not be moved. Fixed that issue, and also revamped the checkLegal system for determining amino acid satisfaction, by making a simplication in the biology by requiring that an amino acid be satisfied by either its location OR a favorable interaction with another amino acid. Wrote and revised code to make the movement of amino acids more seamless, and added visuals to indicate amino acid interaction. Expanded the UI, adding a color-coded help screen, splash screen, populating the info tab, and migrating the help feature/statements from the console to the UI. 

Additionally, increased the algorithmic complexity significantly by incorporating a working, fully-functional autosolve feature that uses backtracking recursion to solve the polypeptide from any point at the click of a button. The ProteinSolver subclasses the BacktrackingPuzzleSolver template, and since there are so many legalMoves that work for any given protein, they are randomized in order, such that there is no bias to how the polypeptide is folded. This was then incorporated into the user interface.

After all this, there are of course biological limitations of this model that I had to take in order for it to be feasible to create, as well as to be a working game. There are also several bugs that remain unfixed, which do not make the game unplayable, but occasionally pose an issue. 

Most notably, this includes one problematic interaction between the tkinter file dialog (when loading a file) and the pygame window, when sometimes the filedialog is immediately MOVED BEHIND the pygame window, forcing the user to navigate to it using the task bar, rather than remaining in front of the pygame window. Pygame and tkinter do not interact very well, so I could not find a solution to this inconvience. Additionally, the file paths might not work correctly with Macs.

Biological limitations of this model:
Only primary structure (in 2D) is shown
Interactions between real and partial charges (dipole-ion) are not taken into account
Interactions between sidechains and backbones are ignored
Amino Acids are represented only as circles (functional groups not drawn)
To determine amino acid "satisfaction", both location and interaction are considered (in other words, a polar AA has only to hbond OR be at the edge to be satisfied), instead of being a mixture of both (which gets very complicated)


